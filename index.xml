<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NOTHING</title>
    <link>https://soyum2222.github.io/</link>
    <description>Recent content on NOTHING</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2015 Copyright Text</copyright>
    
	<atom:link href="https://soyum2222.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GO调度：part Ⅰ - OS 调度器</title>
      <link>https://soyum2222.github.io/scheduling1/</link>
      <pubDate>Sun, 20 Sep 2020 16:51:31 +0800</pubDate>
      
      <guid>https://soyum2222.github.io/scheduling1/</guid>
      <description>翻译自 https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html
序言 这是三篇系列文章中的第一篇，这个系列文章会提供对GO调度器语义背后的理解，这篇文章着重于OS调度器
文章系列索引:
1)Scheduling In Go : Part I - OS Scheduler</description>
    </item>
    
    <item>
      <title>go 中的 Monkey Patching</title>
      <link>https://soyum2222.github.io/monkey/</link>
      <pubDate>Sat, 05 Sep 2020 12:12:35 +0800</pubDate>
      
      <guid>https://soyum2222.github.io/monkey/</guid>
      <description>翻译自 https://bou.ke/blog/monkey-patching-in-go/
很多人认为 monkey Patching 只能在动态语言中，像 Ruby 和 Python,但是并不是这样,计算机是一种愚蠢的机器, 我们始终能让他做我们所想的事情！让我们看下Go函数是如何工作的，以及如何在运行时修改它。这篇文章会使用大量的 intel 汇编， 所以我假设你已经掌握，或者在阅读时会参考查阅相关资料。</description>
    </item>
    
    <item>
      <title>panic and recover 源码阅读</title>
      <link>https://soyum2222.github.io/panic/</link>
      <pubDate>Sat, 29 Aug 2020 13:35:42 +0800</pubDate>
      
      <guid>https://soyum2222.github.io/panic/</guid>
      <description>事情起因是因为上班无聊水群（此处领导不可见），发现群里有小伙伴提了个关于 recover 捕获 panic 的问题
代码1:
func main() { defer recover_func() panic(&amp;quot;panic&amp;quot;) } func recover_func() { func() { err := recover() if err !</description>
    </item>
    
    <item>
      <title>defer 源码阅读 （go 1.13）</title>
      <link>https://soyum2222.github.io/defer/</link>
      <pubDate>Sat, 29 Aug 2020 00:41:00 +0800</pubDate>
      
      <guid>https://soyum2222.github.io/defer/</guid>
      <description>直接上代码  package main import &amp;quot;fmt&amp;quot; func main() { defer func() { fmt.</description>
    </item>
    
    <item>
      <title>Golang 获取 IP 寄存器内容</title>
      <link>https://soyum2222.github.io/getip/</link>
      <pubDate>Thu, 27 Aug 2020 23:04:25 +0800</pubDate>
      
      <guid>https://soyum2222.github.io/getip/</guid>
      <description>之前用C写过一个调度器，想用Go也写一次，正好最近在学习Plan9汇编，趁机巩固一下。
先理清楚基本思路。因为不能直接对IP寄存器做操作，所以无法直接通过 MOVQ IP，AX 这种方式得到IP的值。
但是总所周知，CALL 指令等价于 PUSH IP ，jmp XXX 。所以我们可以通过CALL指令过通过SP寄存器拿到IP的值。</description>
    </item>
    
  </channel>
</rss>